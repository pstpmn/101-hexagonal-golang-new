// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	domains "lean-oauth/internal/core/domains"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MembersUseCase is an autogenerated mock type for the MembersUseCase type
type MembersUseCase struct {
	mock.Mock
}

// FindMemberById provides a mock function with given fields: id
func (_m *MembersUseCase) FindMemberById(id string) (*domains.Members, error) {
	ret := _m.Called(id)

	var r0 *domains.Members
	if rf, ok := ret.Get(0).(func(string) *domains.Members); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Members)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMember provides a mock function with given fields: user, pass, fistName, lastName, dob
func (_m *MembersUseCase) NewMember(user string, pass string, fistName string, lastName string, dob time.Time) (*domains.Members, error) {
	ret := _m.Called(user, pass, fistName, lastName, dob)

	var r0 *domains.Members
	if rf, ok := ret.Get(0).(func(string, string, string, string, time.Time) *domains.Members); ok {
		r0 = rf(user, pass, fistName, lastName, dob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Members)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, time.Time) error); ok {
		r1 = rf(user, pass, fistName, lastName, dob)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMembersUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMembersUseCase creates a new instance of MembersUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMembersUseCase(t mockConstructorTestingTNewMembersUseCase) *MembersUseCase {
	mock := &MembersUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
