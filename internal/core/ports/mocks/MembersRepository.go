// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	domains "lean-oauth/internal/core/domains"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MembersRepository is an autogenerated mock type for the MembersRepository type
type MembersRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo
func (_m *MembersRepository) Create(todo *domains.Members) (*domains.Members, error) {
	ret := _m.Called(todo)

	var r0 *domains.Members
	if rf, ok := ret.Get(0).(func(*domains.Members) *domains.Members); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Members)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domains.Members) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *MembersRepository) Get(id uuid.UUID) (*domains.Members, error) {
	ret := _m.Called(id)

	var r0 *domains.Members
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domains.Members); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Members)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MembersRepository) List() ([]domains.Members, error) {
	ret := _m.Called()

	var r0 []domains.Members
	if rf, ok := ret.Get(0).(func() []domains.Members); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domains.Members)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMembersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMembersRepository creates a new instance of MembersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMembersRepository(t mockConstructorTestingTNewMembersRepository) *MembersRepository {
	mock := &MembersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
