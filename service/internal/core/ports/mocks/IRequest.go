// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IRequest is an autogenerated mock type for the IRequest type
type IRequest struct {
	mock.Mock
}

// Json provides a mock function with given fields: method, url, header, mapBody
func (_m *IRequest) Json(method string, url string, header map[string]string, mapBody map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(method, url, header, mapBody)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(method, url, header, mapBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, map[string]string, map[string]interface{}) error); ok {
		r1 = rf(method, url, header, mapBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: method, url, header, mapBody
func (_m *IRequest) List(method string, url string, header map[string]string, mapBody map[string]interface{}) ([]string, error) {
	ret := _m.Called(method, url, header, mapBody)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string, map[string]string, map[string]interface{}) []string); ok {
		r0 = rf(method, url, header, mapBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, map[string]string, map[string]interface{}) error); ok {
		r1 = rf(method, url, header, mapBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRequest interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRequest creates a new instance of IRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRequest(t mockConstructorTestingTNewIRequest) *IRequest {
	mock := &IRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
